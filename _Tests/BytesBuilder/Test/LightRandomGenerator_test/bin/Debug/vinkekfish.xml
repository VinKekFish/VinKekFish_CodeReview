<?xml version="1.0"?>
<doc>
    <assembly>
        <name>vinkekfish</name>
    </assembly>
    <members>
        <member name="T:vinkekfish.LightRandomGenerator_forTests">
            <summary>Этот класс для тестов. Нет необходимости его использовать как-то ещё. curCNT не приращается, только curCNT_PM - это всё различие</summary>
        </member>
        <member name="T:vinkekfish.LightRandomGenerator_DiskSlow">
            <summary>Класс, генерирующий некриптостойкие значения на основе времени дисковых операций. Это ОЧЕНЬ медленный генератор. Одно срабатывание зависит от того, что и как записывается внутри файловой системы. Может одно срабатывание давать за 1-5 секунд.</summary>
        </member>
        <member name="F:vinkekfish.LightRandomGenerator_DiskSlow.RSleepTimeout">
            <summary>На сколько будет засыпать пишущий поток (который делает приращения к счётчику)</summary>
        </member>
        <member name="M:vinkekfish.LightRandomGenerator_DiskSlow.Dispose(System.Boolean)">
            <summary>Очищает объект</summary>
            <param name="disposing"><see langword="true"/> во всех случаях, кроме вызова из деструктора</param>
        </member>
        <member name="T:vinkekfish.LightRandomGenerator">
            <summary>Класс, генерирующий некриптостойкие значения на основе ожидания потоков.
            Обратите внимание, что на 1 байт сгенерированной информации рекомендуется принимать не более 1 бита случайной информации (а лучше - меньше)
            Пример использования см. в LightRandomGenerator_test01 и VinKekFish_k1_base_20210419_keyGeneration.EnterToBackgroundCycle</summary>
            <remarks>При наследовании обратить внимание на параметр isEnded</remarks>
        </member>
        <member name="F:vinkekfish.LightRandomGenerator.ended">
            <summary>Использование объекта закончено. Объект после этого непригоден к использованию, в том числе, и на чтение байтов</summary>
        </member>
        <member name="F:vinkekfish.LightRandomGenerator.doSleepR">
            <summary>Если <see langword="true"/>, то вызывает Thread.Sleep(doSleepR) на каждой итерации извлечения байта, в противном случае - только по необходимости. Рекомендуется true</summary>
        </member>
        <member name="F:vinkekfish.LightRandomGenerator.doWaitW">
            <summary>Если <see langword="true"/>, то останавливает пишущий (суммирующий) поток, когда данные сгенерированны в нужном количестве (иначе поток так и будет крутиться)</summary>
        </member>
        <member name="F:vinkekfish.LightRandomGenerator.doWaitR">
            <summary>Если <see langword="true"/>, то читающий (выводящий байты в массив) поток будет ждать, когда данные сгенерируются в нужном количестве. Если <see langword="false"/>, то читающий поток будет записывать данные дальше</summary>
        </member>
        <member name="F:vinkekfish.LightRandomGenerator.WaitState">
            <summary>Переменная устанавливается, когда поток сгенерировал все байты и установил приоритет потоков в низший</summary>
        </member>
        <member name="F:vinkekfish.LightRandomGenerator.GeneratedBytes">
            <summary>Брать байты можно и прямо из массива после WaitForGenerator. После взятия вызвать ResetGeneratedBytes. Брать с lock(this)</summary>
        </member>
        <member name="M:vinkekfish.LightRandomGenerator.ResetGeneratedBytes">
            <summary>Сбрасывает все сгенерированные байты без полезного использования. Это стоит вызвать, если GeneratedBytes использованы напрямую</summary>
        </member>
        <member name="M:vinkekfish.LightRandomGenerator.GetRandomBytes(System.Byte[])">
            <summary>Получает из генератора псевдослучайные некриптостойкие байты. Брать байты можно и прямо из массива GeneratedBytes</summary>
            <param name="result">Некриптостойкий результат. result != <see langword="null"/>, result.Length must be less or equal CountToGenerate</param>
        </member>
        <member name="M:vinkekfish.LightRandomGenerator.Dispose(System.Boolean)">
            <summary>Очищает объект</summary>
            <param name="disposing"><see langword="true"/> во всех случаях, кроме вызова из деструктора</param>
        </member>
        <member name="T:vinkekfish.VinKekFish_k1_base_20210419">
            <summary>
        Базовый класс для реализации схем шифрования на основе VinKekFish
      </summary><remarks>
        <para>В этом классе объявлена только инициализация и финализация: остальное в классах-потомках, реализующих конкретные схемы шифрования</para>
        <para>В инициализацию входят:
        генерация стандартных таблиц перестановок
        генерация таблиц перестановок, зависящих от ключа
        начальная инициализация состояния ключом и вектором инициализации
      </para>
      <para>
        В финализацию входит очистка всех массивов от конфиденциальной информации (перезатирание нулями)
      </para>
      <para>
        Для инициализации, после конструктора, вызываются методы Init1 и Init2.
        Для финализации вызывается Dispose
      </para>
        <para>
          См. .\Documentation\VinKekFish_k1_base_20210419_состояния.md<br />
          "Рекомендуемые переходы между состояниями"
        </para>
      </remarks>
        </member>
        <member name="P:vinkekfish.VinKekFish_k1_base_20210419.RTables">
            <summary>Количество раундов, для которого сгенерированны таблицы перестановок</summary>
        </member>
        <member name="F:vinkekfish.VinKekFish_k1_base_20210419._state">
            <summary>Указатель на криптографическое состояние из stateHandle. Доступ к этим элементам из-вне класса не нужен</summary><remarks>
        _state - указатель на само криптографическое состояние<br />
        _state2 - указатель на копию криптографического состояния<br />
        t0 - основной tweak<br />
        t1, t2 - копиии tweak<br />
        _transpose200_3200 - указатель на таблицу перестановок transpose200_3200<br />
        _b, _c - указатели на вспомогательные массивы
      </remarks>
        </member>
        <member name="F:vinkekfish.VinKekFish_k1_base_20210419._state2">
            <summary>Указатель на криптографическое состояние из stateHandle. Доступ к этим элементам из-вне класса не нужен</summary><remarks>
        _state - указатель на само криптографическое состояние<br />
        _state2 - указатель на копию криптографического состояния<br />
        t0 - основной tweak<br />
        t1, t2 - копиии tweak<br />
        _transpose200_3200 - указатель на таблицу перестановок transpose200_3200<br />
        _b, _c - указатели на вспомогательные массивы
      </remarks>
        </member>
        <member name="F:vinkekfish.VinKekFish_k1_base_20210419.t0">
            <summary>Указатель на криптографическое состояние из stateHandle. Доступ к этим элементам из-вне класса не нужен</summary><remarks>
        _state - указатель на само криптографическое состояние<br />
        _state2 - указатель на копию криптографического состояния<br />
        t0 - основной tweak<br />
        t1, t2 - копиии tweak<br />
        _transpose200_3200 - указатель на таблицу перестановок transpose200_3200<br />
        _b, _c - указатели на вспомогательные массивы
      </remarks>
        </member>
        <member name="F:vinkekfish.VinKekFish_k1_base_20210419.t1">
            <summary>Указатель на криптографическое состояние из stateHandle. Доступ к этим элементам из-вне класса не нужен</summary><remarks>
        _state - указатель на само криптографическое состояние<br />
        _state2 - указатель на копию криптографического состояния<br />
        t0 - основной tweak<br />
        t1, t2 - копиии tweak<br />
        _transpose200_3200 - указатель на таблицу перестановок transpose200_3200<br />
        _b, _c - указатели на вспомогательные массивы
      </remarks>
        </member>
        <member name="F:vinkekfish.VinKekFish_k1_base_20210419.t2">
            <summary>Указатель на криптографическое состояние из stateHandle. Доступ к этим элементам из-вне класса не нужен</summary><remarks>
        _state - указатель на само криптографическое состояние<br />
        _state2 - указатель на копию криптографического состояния<br />
        t0 - основной tweak<br />
        t1, t2 - копиии tweak<br />
        _transpose200_3200 - указатель на таблицу перестановок transpose200_3200<br />
        _b, _c - указатели на вспомогательные массивы
      </remarks>
        </member>
        <member name="F:vinkekfish.VinKekFish_k1_base_20210419._transpose200_3200">
            <summary>Указатель на криптографическое состояние из stateHandle. Доступ к этим элементам из-вне класса не нужен</summary><remarks>
        _state - указатель на само криптографическое состояние<br />
        _state2 - указатель на копию криптографического состояния<br />
        t0 - основной tweak<br />
        t1, t2 - копиии tweak<br />
        _transpose200_3200 - указатель на таблицу перестановок transpose200_3200<br />
        _b, _c - указатели на вспомогательные массивы
      </remarks>
        </member>
        <member name="F:vinkekfish.VinKekFish_k1_base_20210419._transpose200_3200_8">
            <summary>Указатель на криптографическое состояние из stateHandle. Доступ к этим элементам из-вне класса не нужен</summary><remarks>
        _state - указатель на само криптографическое состояние<br />
        _state2 - указатель на копию криптографического состояния<br />
        t0 - основной tweak<br />
        t1, t2 - копиии tweak<br />
        _transpose200_3200 - указатель на таблицу перестановок transpose200_3200<br />
        _b, _c - указатели на вспомогательные массивы
      </remarks>
        </member>
        <member name="F:vinkekfish.VinKekFish_k1_base_20210419._b">
            <summary>Указатель на криптографическое состояние из stateHandle. Доступ к этим элементам из-вне класса не нужен</summary><remarks>
        _state - указатель на само криптографическое состояние<br />
        _state2 - указатель на копию криптографического состояния<br />
        t0 - основной tweak<br />
        t1, t2 - копиии tweak<br />
        _transpose200_3200 - указатель на таблицу перестановок transpose200_3200<br />
        _b, _c - указатели на вспомогательные массивы
      </remarks>
        </member>
        <member name="F:vinkekfish.VinKekFish_k1_base_20210419._c">
            <summary>Указатель на криптографическое состояние из stateHandle. Доступ к этим элементам из-вне класса не нужен</summary><remarks>
        _state - указатель на само криптографическое состояние<br />
        _state2 - указатель на копию криптографического состояния<br />
        t0 - основной tweak<br />
        t1, t2 - копиии tweak<br />
        _transpose200_3200 - указатель на таблицу перестановок transpose200_3200<br />
        _b, _c - указатели на вспомогательные массивы
      </remarks>
        </member>
        <member name="F:vinkekfish.VinKekFish_k1_base_20210419.stateHandle">
            <summary>Основной массив, который содержит криптографическое состояние, tweak и вспомогательные массивы. _state и т.п. указывают на него</summary>
        </member>
        <member name="F:vinkekfish.VinKekFish_k1_base_20210419.pTablesHandle">
            <summary>Указатель на массив таблиц перестановок (генерируется в Init1)</summary>
        </member>
        <member name="P:vinkekfish.VinKekFish_k1_base_20210419.IsInited1">
            <summary>На объекте прошла первая стадия инициализации (Init1)</summary>
        </member>
        <member name="P:vinkekfish.VinKekFish_k1_base_20210419.IsInited2">
            <summary>На объекте прошла вторая стадия инициализации (Init2)<br />Объект инициализирован ключами, ОВИ и готов к использованию</summary>
        </member>
        <member name="F:vinkekfish.VinKekFish_k1_base_20210419.AllocHGlobal_allocator">
            <summary>Аллокатор объекта: устанавливает, каким именно методом будет выделена память для объектов при инициализации</summary>
        </member>
        <member name="M:vinkekfish.VinKekFish_k1_base_20210419.Init1(System.Int32,System.Byte*,System.Int64,System.Byte[],System.Int32)">
            <summary>Первичная инициализация: генерация таблиц перестановок (перед началом вызывает Clear)</summary>
            <param name="RoundsForTables">Количество раундов, под которое генерируются таблицы перестановок</param>
            <param name="additionalKeyForTables">Дополнительный ключ: это ключ для таблиц перестановок</param>
            <param name="OpenInitVectorForTables">Дополнительный вектор инициализации для перестановок (используется совместно с ключом)</param>
            <param name="PreRoundsForTranspose">Количество раундов со стандартными таблицами transpose &lt; (не менее 1)</param>
        </member>
        <member name="M:vinkekfish.VinKekFish_k1_base_20210419.Init2(System.Byte*,System.UInt64,System.Byte[],System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>Вторая инициализация: ввод ключа и ОВИ, обнуление состояния и т.п.</summary>
            <param name="key">Основной ключ. Если null, то должен быть установлен флаг IsEmptyKey</param>
            <param name="OpenInitVector">Основной вектор инициализации, может быть null</param>
            <param name="Rounds">Количество раундов при шифровании первого блока ключа (рекомендуется 16-64)</param>
            <param name="RoundsForEnd">Количество раундов при широфвании последующих блоков ключа (допустимо 4)</param>
            <param name="RoundsForExtendedKey">Количество раундов отбоя ключа (рекомендуется NORMAL_ROUNDS = 64)</param>
            <param name="IsEmptyKey">Если key == null, то флаг должен быть установлен. Криптографического преобразования выполняться не будет</param>
        </member>
        <member name="M:vinkekfish.VinKekFish_k1_base_20210419.Clear">
            <summary>Очистка всех данных, включая таблицы перестановок. Использовать после окончания использования объекта (либо использовать Dispose)</summary>
        </member>
        <member name="M:vinkekfish.VinKekFish_k1_base_20210419.ClearState">
            <summary>Обнуляет состояние без перезаписи таблиц перестановок. Использовать после окончания шифрования, если нужно использовать объект повторно с другим ключом</summary>
        </member>
        <member name="M:vinkekfish.VinKekFish_k1_base_20210419.GenStandardPermutationTables(System.Int32,cryptoprime.BytesBuilderForPointers.AllocatorForUnsafeMemoryInterface,System.Byte*,System.Int64,System.Byte[],System.Int32)">
            <summary>Генерирует стандартную таблицу перестановок</summary>
            <param name="Rounds">Количество раундов, для которых идёт генерация. Для каждого раунда по 4-ре таблицы</param>
            <param name="key">Это вспомогательный ключ для генерации таблиц перестановок. Основной ключ вводить нельзя! Этот ключ не может быть ключом, вводимым в VinKekFish, см. описание VinKekFish.md</param>
            <param name="PreRoundsForTranspose">Количество раундов, где таблицы перестановок не генерируются от ключа, а идут стандартно transpose128_3200 и transpose200_3200</param>
        </member>
        <member name="M:vinkekfish.VinKekFish_k1_base_20210419.DoStep(System.Int32)">
            <summary>Выполняет один шаг криптографического преобразования. Это сокращённый вызов step без подготовки tweak. Не использовать напрямую</summary>
            <param name="CountOfRounds">Количество раундов</param>
        </member>
        <member name="M:vinkekfish.VinKekFish_k1_base_20210419.outputData(System.Byte*,System.Int64,System.Int64,System.Int64)">
            <summary>Получает из криптографического состояния вывод</summary>
            <param name="output">Массив для получения вывода</param>
            <param name="start">Индекс в массиве output, с которого надо начинать запись</param>
            <param name="outputLen">Длина массива output</param>
            <param name="countToOutput">Количество байтов, которое нужно изъять из массива</param>
        </member>
        <member name="M:vinkekfish.VinKekFish_k1_base_20210419.Dispose">
            <summary>Уничтожает объект: реализация IDisposable</summary>
        </member>
        <member name="M:vinkekfish.VinKekFish_k1_base_20210419.Dispose(System.Boolean)">
            <summary>Очищает объект</summary>
            <param name="disposing"><see langword="true"/> при всех вызовах, исключая деструктор</param>
        </member>
        <member name="T:vinkekfish.VinKekFish_k1_base_20210419_keyGeneration">
            <summary>
            При использовании класса обязательно вызвать Init1, затем Init2.
            После использования вызвать Dispose, или использовать конструкцию using
            
            Класс предназначен для
            1. Генерации ключей на основе основного ключа и открытого вектора инициализации. См. GetNewKey
            2. Генерации любых последовательностей, в том числе, не повторяемых заново. См. GetNewKey, InputRandom, EnterToBackgroundCycle
            </summary>
        </member>
        <member name="M:vinkekfish.VinKekFish_k1_base_20210419_keyGeneration.GetNewKey(System.Int64,System.Int64,cryptoprime.BytesBuilderForPointers.AllocatorForUnsafeMemoryInterface,System.Int32)">
            <summary>Функция генерирует ключи шифрования. После инициализации Init1 и Init2, функция готова к использованию без дополнительных вызовов</summary>
            <param name="len">Количество байтов, которые сгенерировать</param>
            <param name="blockLen">Длина блока генерации в байтах, не более BLOCK_SIZE. По умолчанию, длина уменьшена до 64 байтов (для надёжности)</param>
            <param name="allocator">Метод выделения памяти для ключа. Если null, то AllocHGlobal_AllocatorForUnsafeMemory</param>
            <param name="CountOfRounds">Количество раундов для генерации</param>
            <returns>Сгенерированный ключ</returns>
        </member>
        <member name="M:vinkekfish.VinKekFish_k1_base_20210419_keyGeneration.EmptyStep(System.Int32)">
            <summary>Пропустить один шаг (для большей отбивки от других значений)</summary>
            <param name="CountOfRounds">Количество раундов для отбивки</param>
        </member>
        <member name="M:vinkekfish.VinKekFish_k1_base_20210419_keyGeneration.EmptyStepOverwrite(System.Int32)">
            <summary>Пропустить один шаг с перезаписью в режиме OVERWRITE (для большей отбивки от других значений и реализации необратимости: после ввода ключа это и так делается)</summary>
            <param name="CountOfRounds">Количество раундов для отбивки</param>
        </member>
        <member name="M:vinkekfish.VinKekFish_k1_base_20210419_keyGeneration.InputRandom(System.Byte*,System.Int64,System.Int32)">
            <summary>Вводит рандомизирующие данные в губку (выполняет криптографические операции)</summary>
            <param name="data">Данные для ввода</param>
            <param name="data_length">Длина вводимых данных</param>
            <param name="CountOfRounds">Количество раундов</param>
        </member>
        <member name="F:vinkekfish.VinKekFish_k1_base_20210419_keyGeneration.BackgroundSleepTimeout">
            <summary>См. описание параметра EnterToBackgroundCycle</summary>
        </member>
        <member name="F:vinkekfish.VinKekFish_k1_base_20210419_keyGeneration.BackgroundSleepCount">
            <summary>См. описание параметра EnterToBackgroundCycle</summary>
        </member>
        <member name="F:vinkekfish.VinKekFish_k1_base_20210419_keyGeneration.BackgourndGenerated">
            <summary>Количество сгенерированных блоков энтропии.
            Считается, что на один байт приходится 1 бит энтропии, то есть на BLOCK_SIZE=512 приходится 512 битов
            (рекомендуется ещё уменьшать в пару раз хотя бы).
            Если считать, что на один блок 4096 байтов приходится 1 бит энтропии, то BackgourndGenerated - это количество сгенерированных битов энтропии.
            В любом случае, это не надёжный источник рандомизации, вместе с ним необходимо использовать и другие источники, если возможно.
            При таком подходе, условно, примерно за 100 секунд на одном ядре с максимальной загрузкой генерируется ключ на 4096 битов длиной, так что производительность всё равно хорошая
            Запись в данную переменную производить с помощью lock (this) - допускается только обнуление данной переменной</summary>
        </member>
        <member name="M:vinkekfish.VinKekFish_k1_base_20210419_keyGeneration.EnterToBackgroundCycle(System.UInt16,System.UInt16,System.Boolean,System.Boolean,vinkekfish.LightRandomGenerator)">
            <summary>Войти в цикл дополнительной инициализации псевдослучайными значениями.
            До вызова ExitFromBackgroundCycle пользователь не должен использовать других методов.
            Если есть желание использовать другие методы, то их нужно оборачивать lock (this).
            </summary>
            <param name="BackgroundSleepTimeout">Thread.Sleep(BackgroundSleepTimeout). Устанавливает значение, на которое поток спит после генерации BackgroundSleepCount блоков keccak (по 64 байта).
            BackgroundSleepCount = 0 - самое быстрое, загрузка почти всего процессорного ядра, если оно не занято чем-то ещё.
            BackgroundSleepCount = 72 - это загрузка на уровне не выше пары процентов от одного ядра.
            Происходит генерация где-то одного блока VinKekFish (BLOCK_SIZE байтов) за секунду или менее (то BackgourndGenerated приращается на единицу за секунду или быстрее) - то есть 1 бит рандомизации в секунду</param>
            <param name="BackgroundSleepCount">После таймаута идёт генерация блоков для keccak. На один таймаут приходится BackgroundSleepCount блоков.</param>
            <param name="generator">Генератор нестойких псевдослучайных чисел, должен генерировать по 64 байта в блок. В ExitFromBackgroundCycle автоматически удаляется</param>
            <param name="doWaitR">Параметр инициализирует одноимённое поле generator.doWaitR, но только если generator = null</param>
            <param name="doWaitW">Параметр инициализирует одноимённое поле generator.doWaitW, но только если generator = null</param>
        </member>
        <member name="M:vinkekfish.Keccak_base_20200918.Clear(System.Boolean)">
            <summary>Производит очистку состояния объекта</summary>
            <param name="GcCollect">Если <see langword="true"/>, то пытается произвести полную очистку памяти приложения,
            выделяя кучу памяти и перезаписывая её. Без гарантий на перезапись.
            Осторожно!!! Функция может использовать слишком много оперативной памяти, что может повлечь за собой отказ других программ в ОС</param>
        </member>
        <member name="M:vinkekfish.Keccak_base_20200918.AllocPartOfMemory">
            <summary>Попытка очистить часть памяти</summary>
        </member>
        <member name="M:vinkekfish.Keccak_base_20200918.AllocFullMemory(System.Int64)">
            <summary>Эта функция старается выделить для себя всю доступную память- это функция пытается жёстко очистить память, может вызвать нехватку памяти у других приложений влоть до падения системных приложений</summary>
        </member>
        <member name="M:vinkekfish.Keccak_base_20200918.AllocFullMemoryInLongBlocks(System.Int64)">
            <summary>Эта функция старается выделить для себя всю доступную память, но только по размеру блока (чтобы не выделить вообще всю память на себя) - это функция пытается очистить память</summary>
        </member>
        <member name="M:vinkekfish.Keccak_base_20200918.AllocFullMemoryInLongBlocksWithSecondAlloc(System.Int64)">
            <summary>Несколько раз выделяет память в системе большими блоками (чтобы всё совсем не перевыделить) - это функция пытается очистить память. Эта функция рекомендуется перед остальными</summary>
            <param name="blockSize">Размер блока</param>
        </member>
        <member name="T:vinkekfish.Keccak_base_20200918.DoubleHash">
            <summary>DoubleHash.one - обычный хеш 64-ре байта, DoubleHash.two - два раза по 64-ре байта, DoubleHash.full72 - один раз 72 байта</summary>
        </member>
        <member name="M:vinkekfish.Keccak_base_20200918.getHash512(System.Byte*,System.Int64,System.Boolean,System.Int64,System.Int64,System.Boolean,System.Byte[],System.UInt64,vinkekfish.Keccak_base_20200918.DoubleHash)">
            <summary>Получает 512-тибитный хеш keccak (не SHA-3, есть отличия)</summary>
            <param name="message">Массив для хеширования</param>
            <param name="doClear">Если true, то после вычисления хеша выполняется очистка.
            Очистка производится с помощью вызова ClearState: это очистка состояния, включая вспомогательные массивы, но без вызова Clear()</param>
            <param name="startIndex">Начальный индекс того, что хешируем в message (по-умолчанию - 0)</param>
            <param name="countToHash">Количество элементов для хеширования (по-умолчанию - -1 - до конца)</param>
            <param name="isInitialized">Если false (по-умолчанию), то функция выполняет инициализацию матрицы S. <see langword="true"/> может быть использовано, если перед хешем была отдельная инициализация, например, модификатором</param>
            <param name="forResult">Если null, то массив для хеша будет создан. В противном случае, запись будет произведена в массив forResult</param>
            <param name="index">Если forResult != <see langword="null"/>, то запись будет произведена по индексу index</param>
            <param name="doubleHash">DoubleHash.one - обычный хеш 64-ре байта, DoubleHash.two - два раза по 64-ре байта, DoubleHash.full72 - один раз 72 байта</param>
            <returns>Массив с запрошенным хешем</returns>
        </member>
        <member name="T:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128">
            <summary>Криптостойкий ГПСЧ</summary>
        </member>
        <member name="M:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.#ctor(cryptoprime.BytesBuilderForPointers.AllocatorForUnsafeMemoryInterface,System.Int32)">
            <summary>Создаёт пустой объект</summary>
            <param name="allocator">Способ выделения памяти внутри объекта, кроме выделения памяти для вывода. Может быть null.</param>
            <exception cref="T:System.OutOfMemoryException"></exception>
            <remarks>Рекомендуется вызвать init() после вызова конструктора.</remarks>
        </member>
        <member name="M:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.Clone">
            <summary>Клонирует внутреннее состояние объекта и аллокаторы. Вход и выход не копируются</summary><returns></returns>
        </member>
        <member name="F:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.INPUT">
            <summary>Сюда можно добавлять байты для ввода</summary>
        </member>
        <member name="F:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.InputSize">
            <summary>Размер блока вводимой (и выводимой) информации</summary>
        </member>
        <member name="F:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.inputTo">
            <summary>Это массив для немедленного введения в Sponge на следующем шаге</summary>
        </member>
        <member name="F:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.inputReady">
            <summary>Если <see langword="true"/>, то в массиве inputTo ожидают данные. Можно вызывать calStep</summary>
        </member>
        <member name="P:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.isInputReady">
            <summary>Если <see langword="true"/>, то в массиве inputTo ожидают данные. Можно вызывать calStep</summary>
        </member>
        <member name="F:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.output">
            <summary>Массив, представляющий результаты вывода</summary>
        </member>
        <member name="F:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.outputBuffer">
            <summary>Буффер используется для вывода данных и в других целях. Осторожно, его могут использовать совершенно разные функции</summary>
        </member>
        <member name="P:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.outputCount">
            <summary>Количество элементов, которые доступны для вывода без применения криптографических операций</summary>
        </member>
        <member name="M:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.InputBytes(System.Byte[])">
            <summary>Ввести рандомизирующие байты (в том числе, открытый вектор инициализации). Не выполняет криптографических операций</summary>
            <param name="bytesToInput">Рандомизирующие байты. Копируются. bytesToInput должны быть очищены вручную</param>
        </member>
        <member name="M:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.InputBytes(System.Byte*,System.Int64)">
            <summary>Ввести рандомизирующие байты (в том числе, открытый вектор инициализации). Не выполняет криптографических операций</summary>
            <param name="bytesToInput">Рандомизирующие байты. Копируются. bytesToInput должны быть очищены вручную</param>
            <param name="len">Длина рандомизирующей последовательности</param>
        </member>
        <member name="M:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.InputBytesWithoutClone(cryptoprime.BytesBuilderForPointers.Record)">
            <summary>Ввести рандомищирующие байты. Не выполняет криптографических операций.</summary>
            <param name="data">Вводимые байты. Будут очищены автоматически. Не должны использоваться ещё где-либо</param>
        </member>
        <member name="M:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.InputKeyAndStep(System.Byte*,System.Int64,System.Byte*,System.Int64)">
            <summary>Ввести секретный ключ и ОВИ (вместе с криптографическим преобразованием)</summary>
            <param name="key">Ключ. Должен быть очищен вручную (можно сразу после вызова функции)</param>
            <param name="key_length">Длина ключа</param>
            <param name="OIV">Открытый вектор инициализации, не более InputSize (не более 64 байтов). Может быть null. Должен быть очищен вручную (можно сразу после вызова функции)</param>
            <param name="OIV_length">Длина ОВИ</param>
        </member>
        <member name="M:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.Clear(System.Boolean)">
            <summary>Очистка объекта (перезабивает данные нулями)</summary>
            <param name="GcCollect"></param>
        </member>
        <member name="M:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.Dispose(System.Boolean)">
            <summary>Уничтожение объекта: очищает объект и освобождает все связанные с ним ресурсы</summary>
            <param name="disposing">True из любого места программы, кроме деструктора</param>
        </member>
        <member name="M:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.InputBytesImmediately(System.Boolean,System.Boolean)">
            <summary>Переносит байты из очереди ожидания в массив байтов для непосредственного ввода в криптографическое состояние. Не выполняет криптографических операций</summary>
            <param name="ForOverwrite">Если <see langword="true"/>, то записывает данные, даже если их меньше, чем блок, выравнивая вход нулями до InputSize. Эта реализация нигде не имеет paddings, поэтому осторожнее с этим, это может вызвать неоднозначность при вводе (введены нули в конце или короткое значение?)</param>
            <remarks>Если inputReady установлен, то функция выдаст исключение. Установить notException, если исключение не нужно</remarks>
        </member>
        <member name="M:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.calcStepAndSaveBytes(System.Boolean)">
            <summary>Выполняет шаг keccak и сохраняет полученный результат в output</summary>
        </member>
        <member name="M:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.calcStep(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Расчитывает шаг губки keccak. Если есть InputSize (64) байта для ввода (точнее, inputReady == true), то вводит первые 64-ре байта</summary>
            <param name="SaveBytes">Если <see langword="null"/>, выход не сохраняется</param>
            <param name="Overwrite">Если <see langword="true"/>, то вместо xor применяет перезапись внешней части состояния на вводе данных (конструкция Overwrite)</param>
            <remarks>Перед calcStep должен быть установлен inputReady, если нужна обработка введённой информации. Функции Input* устанавливают этот флаг автоматически</remarks>
        </member>
        <member name="M:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.getBytes(cryptoprime.BytesBuilderForPointers.Record,System.Int64)">
            <summary>Выдаёт случайные криптостойкие значения байтов. Выгодно использовать при большом количестве байтов (64 и более). Выполняет криптографические операции, если байтов не хватает. Автоматически берёт данные из INPUT, если они уже введены</summary>
            <param name="output">Массив, в который записывается результат</param>
            <param name="len">Количество байтов, которые необходимо записать. Используйте outputCount, чтобы узнать, сколько байтов уже готово к выводу (без выполнения криптографических операций)</param>
        </member>
        <member name="M:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.getUnsignedInteger(System.UInt64,cryptoprime.BytesBuilderForPointers.Record)">
            <summary>Выдаёт случайное криптостойкое число от 0 до cutoff включительно. Это вспомогательная функция для основной функции генерации случайных чисел</summary>
            <param name="cutoff">Максимальное число (включительно) для генерации. cutoff должен быть близок к ulong.MaxValue или к 0x8000_0000__0000_0000U, иначе неопределённая отсрочка будет очень долгой</param>
            <param name="arrayAt8Length">Вспомогательная выделенная память в размере не менее 8-ми байтов (можно не инициализировать). Очищается после использования внутри функции. Может быть null</param>
            <returns>Случайное число в диапазоне [0; cutoff]</returns>
        </member>
        <member name="M:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.getUnsignedInteger(System.UInt64,System.UInt64,System.UInt64,cryptoprime.BytesBuilderForPointers.Record)">
            <summary>Получает случайное значение в диапазоне, указанном в функции getCutoffForUnsignedInteger</summary>
            <param name="min">Минимальное значение</param>
            <param name="cutoff">Результат функции getCutoffForUnsignedInteger</param>
            <param name="range">Результат функции getCutoffForUnsignedInteger</param>
            <returns>Случайное число в указанном диапазоне</returns>
        </member>
        <member name="M:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.getCutoffForUnsignedInteger(System.UInt64,System.UInt64,System.UInt64@,System.UInt64@)">
            <summary>Вычисляет параметры для применения в getUnsignedInteger</summary>
            <param name="min">Минимальное значение для генерации</param>
            <param name="max">Максимальное значнеие для генерации (включительно)</param>
            <param name="cutoff">Параметр cutoff для передачи getUnsignedInteger</param>
        </member>
        <member name="M:vinkekfish.keccak.keccak_20200918.Keccak_PRNG_20201128.doRandomPermutationForUShorts(System.UInt16[])">
            <summary>Осуществляет перестановки таблицы 2-хбайтовых целых чисел</summary>
            <param name="table">Исходная таблица для перестановок длиной не более int.MaxValue</param>
        </member>
        <member name="F:vinkekfish.Keccak_abstract.State">
            <summary>Внутреннее состояние keccak. Используйте KeccakStatesArray для того, чтобы разбить его на указатели. Не нужно конечному пользователю</summary>
        </member>
        <member name="M:vinkekfish.Keccak_abstract.Clear(System.Boolean)">
            <summary>Дополнительно очищает состояние объекта после вычислений.
            Рекомендуется вручную вызывать Clear5 и Clear5x5 до выхода из fixed, чтобы GC не успел их переместить (скопировать) до очистки</summary>
            <param name="GcCollect">Если true, то override реализации должны дополнительно попытаться перезаписать всю память программы. <see langword="abstract"/> реализация ничего не делает</param>
        </member>
        <member name="M:vinkekfish.Keccak_abstract.ClearState">
            <summary>Очищает состояние объекта</summary>
        </member>
        <member name="M:vinkekfish.Keccak_abstract.ClearStateWithoutStateField">
            <summary>Очищает состояние объекта, но не State</summary>
        </member>
        <member name="M:vinkekfish.Keccak_abstract.init">
            <summary>Инициализирует состояние нулями</summary>
        </member>
        <member name="M:vinkekfish.Keccak_abstract.clearOnly_C_and_B">
            <summary>Эту функцию можно вызывать после keccak, если нужно состояние S, но хочется очистить B и C</summary>
        </member>
        <member name="M:vinkekfish.Keccak_abstract.Clear5x5(System.UInt64*)">
            <summary>Этот метод может использоваться для очистки матриц S и B после вычисления последнего шага хеша</summary>
            <param name="S">Очищаемая матрица размера 5x5 *ulong</param>
        </member>
        <member name="M:vinkekfish.Keccak_abstract.Clear5(System.UInt64*)">
            <summary>Этот метод может использоваться для очистки вспомогательного массива C</summary>
            <param name="C">Очищаемый массив размера 5*ulong</param>
        </member>
    </members>
</doc>
